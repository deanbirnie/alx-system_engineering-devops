Billions of people use the internet every day to interact with their favourite websites, be it for pleasure or even work. We are able to navigate millions (if not billions) of websites and services using a naming convention that makes it incredibly simple for us to remember the address for each of these sites. In fact, unless a particular site or service is used frequently enough, it's far more likely that users would locate the site thanks to the wonderful work of search engines. Don't forget that a large percentage of people out there will use bookmarks and autofill features built into almost all web-browsers commonly used today. My point is that in general, users are not able (or in some cases, willing) to remember large numbers of names and so the most frequently visited are prioritised, relegating the rest to the depths of Google's seemingly infinite number of search results pages, Let's face it we've all found an interesting page we'd love to visit again but simply can't find it and only the brave (or desperate) dare travel further than the first page, let alone the second or... third?

So, if people struggle to remember names, it's no wonder DNS was conceived to simplify the process of finding the server on which the site they're requesting is hosted. So what is DNS? DNS or Domain Name System translates human-readable names into IP addresses that the world's networked devices use to communicate with each other. You see, computers, or as I'll refer to them; "networked devices" (those that are connected to the internet and capable of sending and receiving information across the internet) are able to find each other much like any person would find a business or a house, by searching for the address. Only, computers need an exact address which is made up of numbers. These sets of numbers make up what we call an IP address - Internet Protocol. They consist of four sets of up to 3 digit numbers, each separated by a period. For example, 127.0.0.1 is a valid IP address, however, this one is somewhat special in that it is typically used as what is referred to a "loopback address" which allows the individual computer to refer to itself. We won't be going into too much more detail regarding IP addresses but you should also note that the example of 127.0.0.1 also falls into one of the few IP address ranges that are reserved for local networking and are therefore not publically accessible over the internet. Since an IP address, as we've just seen, is made up of four sets of up to 3 digit numbers (each set being from 0 to 255 inclusive) we can see that each set, or octet, represents an 8-bit value and therefore, each IP address is defined as a 32-bit number. This would mean that there are more than four billion possible IP address permutations available. Remember, however, that some of these are not used as public addresses and are instead reserved for local networks. We'll stop here and pick up on this topic in a later article but if you're thinking to yourself "But wait, there are more than four billion people on earth and many more networked devices than that!", well, you're right and the IPv4 protocol is quickly becoming more of an issue. There are some clever tricks engineers have used to keep everything working but there is certainly pressure to move to the IPv6 protocol which can accommodate more addresses than we will need. 

So, you've remembered the name of the site you want to visit, www.google.com for example, and DNS is able to find the appropriate IP address amongst the more than four billion possible IP address permutations? Well, yes, but that's not exactly how it works.

You've typed www.google.com into your browser and hit enter. Your browser needs to know the address from which it can request the resources required to load that particular webpage.

In this case, we're assuming that there is no cache available. Cache, in this context, refers to the act of storing information locally in order to decrease the amount of time it takes to find that same information the next time it is requested. More on this later but for now, your browser, operating system, router, and even your ISP will often cache regularly accessed websites IP addresses in order to provide a quicker response time for the user. 
Your browser doesn't immediately know the address of the server you have requested so it reaches out to the DNS server it has been configured to use. If you haven't configured your network yourself and defined specific DNS servers to use, your network will default to the DNS server that your ISP has designated. 

At this point, our browser has successfully sent a request to the relevant server. The host server is now responsible for handling the request and serving the appropriate content. When our browser initially makes contact with the server, it receives what is known as an SSL certificate which is essentially a means of verifying that the server with which we are communicating is actually the server it claims to be. This allows us to use HTTPS (Hyper Text Transfer Protocol Secure) which encrypts the information or data that travels between our computer and the host server for the website. If no SSL certificate had been configured, our information could easily be intercepted by a third party pretending to be the legitimate host server. Even with SSL in place, it is still possible that our information is intercepted, however, due to the encryption, it would not be of any use to a third party.

Now, in many cases where web services have many users across multiple continents, the web service will utilise a Content Delivery  Network which allows these companies to cache general or region-specific data in a physical location that is closer to the users that are likely to be accessing it which decreases processing time for each request. In other cases, companies may opt for simple load-balancing solutions where the host server is not actually the server on which the data is stored and simply decides which server to send the user to. In both instances, CDN and load balancing, the company is somewhat protected against the event that particular servers become unavailable unexpectedly and the user will simply be directed to another server that is still active. Another big positive is that the company can effectively deal with periods of high demand by distributing the load across many servers as opposed to over-loading one server before utilising the next. To get really technical, the large tech companies we're all familiar with will have thousands of servers and control their own Content Delivery Network across the globe. They may even spawn new servers depending on the overall load. This "elasticity" allows the companies to only use the resources they need at any point in time. If there is a low volume of traffic, there will be very few servers in operation. As traffic volume increases, more servers are spun up and the load is balanced across a greater number of servers allowing for better performance for the end user. Performance is a key factor in Search Engine Optimisation which ranks websites based on search parameters.

Your browser has located the appropriate server and made a secure connection, it may have been redirected to another server that will, from now on (until the end of your session at least), be responsible for actually serving the resources and storing your data. The new server that we're interacting with (now referred to as the host), as well as all of the other servers we have and will come into contact with along the way, will be protected by a firewall which is a defensive tool that decides what traffic is allowed to interact with the server. In a very simple example, a static website perhaps, the server may only allow traffic based on specific parameters. These can be certain IP address ranges or specific ports for those IP address ranges. These servers can be accessible to the public for the purpose of serving a website while also being available to the developers and engineers who are responsible for maintaining the web service. The firewall will generally only allow traffic through specified ports. Ports can be thought of as gates that can be opened or closed by the firewall. Popular technologies have ports "reserved" for their particular use. While they will still work using other ports, the world has generally accepted each of these ports as being used for a particular technology to avoid confusion. For instance, the HTTPS protocol, that our browser uses to securely communicate with a web service's server, uses port 443. Fortunately, our browser specifies the protocol and therefore the port on our behalf. If you type in "www.google.com" and then click back into the URL bar, select all the text, copy it, and paste it in plain text, you'll notice that your browser has automatically added "https://" to the "www.google.com" that we typed in. This is because it has been generally accepted that all web traffic should be conducted with HTTPS as HTTP is simply insecure. 

 

After finding and securely connecting with the appropriate physical server, your request will be routed internally (internal to the physical host server) to the web server application that will be serving the actual files we need to render the web page. As mentioned previously, this will more than likely be through port 443 (HTTPS) unless your traffic is redirected internally or from the load balancer using port 80 (HTTP). The web server will either server static files that your browser can use to render the page on our screen or hand you over to the application server which will decide what files to serve your browser based on certain parameters. If you are writing a blog post, updating your information, or performing any other action that requires data to be stored or retrieved, the application server will interact with the application's database in order to store or retrieve that data.


Although it seems like you've taken the scenic route to get to your destination, all of the above happens incredibly quickly and even if the host server is located on the other side of the world, we're talking about seconds for your browser to request files, find and connect to the host server, receive the files and render the page on your screen. It truly is a remarkable process. It's difficult to truly understand all of these concepts looking at the process as a whole and so I plan to break it down into smaller articles soon. Thanks for reading and I hope you've learned something new!